decline <- auto.arima(tail(Cases$DeathsPerDay, 7))
decadd <- forecast(decline, 7)
runApp()
x
tail(Cases)
x
fcasts
decline <- auto.arima(tail(Cases$DeathsPerDay, 7))
decadd <- forecast(decline, 7)
decadd
runApp()
x <- as.data.frame(decadd$upper)
x
decadd <- forecast(decline, 7)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 7))
decline
View(Cases)
#remove this
Cases[-84,]
#remove this
Cases <- Cases[-84,]
decline <- auto.arima(tail(Cases$DeathsPerDay, 7))
decadd <- forecast(decline, 7)
decadd
tail(Cases$DeathsPerDay,7)
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 7)
decadd
runApp()
decadd
#remove this
#Cases <- Cases[-84,]
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=3)
#remove this
#Cases <- Cases[-84,]
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=2)
decadd <- forecast(decline, 7)
decadd
#remove this
#Cases <- Cases[-84,]
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 7)
decadd
#remove this
#Cases <- Cases[-84,]
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), D=1)
decadd <- forecast(decline, 7)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 7)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 14), d=1)
decadd <- forecast(decline, 7)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 21), d=1)
decadd <- forecast(decline, 7)
x <- as.data.frame(decadd$upper)
x
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 15), d=1)
decadd <- forecast(decline, 7)
decadd <- forecast(decline, 7)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 5), d=1)
decadd <- forecast(decline, 5)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 5)
x <- as.data.frame(decadd$upper)
x
decadd <- forecast(decline, 5)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 6), d=1)
decadd <- forecast(decline, 5)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 4)
decadd
decadd <- forecast(decline, 3)
decadd
x <- as.data.frame(decadd$lower)
C3 <- c(Cases$DeathsPerDay %>% na.omit(), x$`80%`)
model <- auto.arima(C3)
fcasts <- forecast(model , 60)
x <- as.data.frame(fcasts$lower)
newDF <- data.frame("Date"= as.Date((Cases$Date[nrow(Cases)]+1):(Cases$Date[nrow(Cases)]+60), origin = "1970-01-01"), "Cases"=NA,  "CasesPerDay"=NA , "Deaths" = NA, "DeathsPerDay"=x$`80%`)
Cases <- rbind(Cases,newDF)
View(Cases)
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 2)
runApp()
x
fcasts
model <- auto.arima(C3, d=1)
fcasts <- forecast(model , 60)
fcasts
decline <- auto.arima(Cases$DeathsPerDay,d=1)
decadd <- forecast(decline, 3)
decadd
# decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
# decadd <- forecast(decline, 2)
# x <- as.data.frame(decadd$lower)
#
# C3 <- c(Cases$DeathsPerDay %>% na.omit(), x$`80%`)
model <- auto.arima(Cases$DeathsPerDay, d=1)
fcasts <- forecast(model , 60)
fcasts
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 2)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 3), d=1)
decadd <- forecast(decline, 2)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 5), d=1)
decadd <- forecast(decline, 2)
decadd
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 2)
decadd
C3 <- c(Cases$DeathsPerDay %>% na.omit(), x$`80%`)
model <- auto.arima(C3, d=1)
fcasts <- forecast(model , 60)
fcasts
C3
decline <- auto.arima(tail(Cases$DeathsPerDay, 7), d=1)
decadd <- forecast(decline, 2)
x <- as.data.frame(decadd$lower)
x
C3 <- c(Cases$DeathsPerDay %>% na.omit(), x$`80%`)
C3
model <- auto.arima(tail(C3,21), d=1)
fcasts <- forecast(model , 60)
fcasts
model <- auto.arima(tail(C3,21))
fcasts <- forecast(model , 60)
fcasts
model <- auto.arima(tail(C3,30))
fcasts <- forecast(model , 60)
fcasts
x <- as.data.frame(fcasts$lower)
x
runApp()
View(Cases)
runApp()
runApp()
head(StateData)
fwrite(StateData, "Italy.csv")
Italy <- fread("Italy.csv")
model <- auto.arima(Italy$DeathsPerDay)
forecast(model, 20)
View(Italy)
plot(Italy$DeathsPerDay)
q <- 1:nrow(Italy)
model <- lm(Italy$DeathsPerDay ~ poly(q,2))
model$model
plot(model)
summary(modle)
summary(model)
predicted.intervals <- predict(model,data.frame(x=q),interval='confidence',
level=0.99)
predicted.intervals
model <- lm(Italy$DeathsPerDay ~ poly(q,3))
predicted.intervals <- predict(model,data.frame(x=q),interval='confidence',
level=0.99)
predicted.intervals
q
model
summary(model)
model <- lm(Italy$DeathsPerDay ~ poly(q,2) + Italy$Deaths)
summary(model)
model <- lm(Italy$DeathsPerDay ~ poly(q,3) + Italy$Deaths)
model
summary(Model)
summary(model)
runApp()
runApp()
StateData
runApp()
Italy
Italy <- Italy %>% mutate(Index= n(), DailyDeathsPerCapita=DeathsPerDay/60.36)
Italy
Italy <- Italy %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/60.36)
Italy
View(df %>% filter(Case_Type=="Deaths" & Country_Region == 'Spain')
)
runApp()
runApp()
Italy
Italy <- Italy %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/60.36)
View(Italy)
Italy <- Italy %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/60.36)
model <- lm(Italy$DailyDeathsPerCaptia ~ poly(Italy$Index, 3, raw=TRUE))
model <- lm(Italy$DailyDeathsPerCapita ~ poly(Italy$Index, 3, raw=TRUE))
summary(model)
runApp()
summary(model)
View(Cases)
Cases <- Cases %>% na.omit()
View(Cases)
runApp()
Cases <- Cases %>% na.omit()
runApp()
View(Cases)
runApp()
View(Cases)
Cases <- left_join(Cases2, Cases)
View(Cases)
Cases <- Cases %>% mutate(CalculatedNewCases = lead(DeathsPerDay, input$deathTime)*(input$fatal*100))
Cases %>% mutate(CalculatedNewCases = lead(DeathsPerDay, 21)*(1*100))
View(.Last.value)
Cases <- Cases %>% mutate(CalculatedNewCases = lead(DeathsPerDay, input$deathTime)*(input$fatal*100))
Cases <- Cases %>% mutate(CalculatedNewCases = lead(DeathsPerDay, 21)*(1*100))
Cases[!is.na(Cases$CalculatedNewCases), ] %>% mutate(TotalImpliedCases=cumsum(CalculatedNewCases))
View(.Last.value)
Cases %>% mutate(TotalImpliedCases=cumsum(CalculatedNewCases))
View(Cases %>% mutate(TotalImpliedCases=cumsum(CalculatedNewCases)))
Cases[!is.na(Cases$CalculatedNewCases), ] <- Cases[!is.na(Cases$CalculatedNewCases), ] %>% mutate(TotalImpliedCases=cumsum(CalculatedNewCases))
Cases$TotalImpliedCases <- NA
Cases[!is.na(Cases$CalculatedNewCases), ] <- Cases[!is.na(Cases$CalculatedNewCases), ] %>% mutate(TotalImpliedCases=cumsum(CalculatedNewCases))
View(Cases)
runApp()
View(Cases)
Cases %>% mutate(CalculatedDeaths=lag(CalculatedNewCases,13) * (1 /100))
View(.Last.value)
Cases %>% mutate(CalculatedDeaths=lag(CalculatedNewCases,13))
View(.Last.value)
Cases %>% mutate(CalculatedDeaths=(lag(CalculatedNewCases,13) * (1/100)))
View(.Last.value)
Cases %>% mutate(CalculatedDeaths=(lag(CalculatedNewCases,21) * (1/100)))
View(.Last.value)
Cases %>% mutate(CalculatedDeaths=(lag(CalculatedNewCases,21) * (3/100)))
View(.Last.value)
runApp()
View(Cases)
Cases %>% filter(!is.na(Deaths))
Cases <- Cases %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/328.2)
summary(model)
View(Cases)
View(Italy)
runApp()
Cases <- Cases %>% filter(!is.na(Deaths))
Cases <- Cases %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/328.2)
View(Cases)
new.df <- data.frame(Index = c(nrow(Cases):(nrow(Cases)+30)))
new.df
predict(model, new.df)
predict(new.df, model)
predict(model, new.df)
predict(model, new.df$Index)
new.df <- data.frame(Index = c(nrow(Cases):(nrow(Cases)+60)))
predict(model, new.df)
t <- 1:nrow(Cases)
y <- (t^2)/500 + arima.sim(model = list(ar=0.5),n = length(t))
plot(Cases$DailyDeathsPerCapita)
lines(t^2/50)
lines(t^2/500)
lm(Cases$DailyDeathsPerCapita ~ poly(Cases$Index, 3, raw=TRUE))
mod <- lm(Cases$DailyDeathsPerCapita ~ poly(Cases$Index, 3, raw=TRUE))
mod$terms
mod$fitted.values
mod$effects
lines(mod)
lines(mod$fitted.values)
mod <- lm(Cases$DailyDeathsPerCapita ~ poly(Cases$Index, 2, raw=TRUE))
plot(Cases$DailyDeathsPerCapita)
lines(mod$fitted.values)
predict(mod, 30)
forecast(mod, 20)
View(Cases)
Cases$Index<- 1:(nrow(Cases)+30)
Cases$Index<- c(Cases$Index, nrow(Cases):(nrow(Cases)+30))
Cases$Index<- rbind(Cases$Index, nrow(Cases):(nrow(Cases)+30))
Cases %>% mutate(Index = 1:(nrow(Cases)+30))
Cdf <- data.frame(DPC = Cases$DailyDeathsPerCapita, Index = c(Cases$Index, rep(NA, 30)))
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita, rep(NA, 30)), Index = 1:nrow(Cases)+30)
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita, rep(NA, 30)))
Cdf
Cdf$Index <- 1:nrow(Cdf)
Cdf
predict(model, Cdf)
model <- lm(DPC ~ poly(Index, 3), raw=T)
model <- lm(DPC ~ poly(Index, 3), raw=T, data=Cdf)
model <- lm(DPC ~ poly(Index, 3), data=Cdf)
plot(Cases$DailyDeathsPerCapita)
plot(model$fitted.values)
predict(model, df)
predict(model, Cdf)
Cdf <- data.frame(DPC = c(Italy$DailyDeathsPerCapita, rep(NA, 30)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 3, data=Cdf))
model <- lm(DPC ~ poly(Index, 3), data=Cdf)
plot(model$fitted.values)
predict(model, Cases$Index)
test <- data.frame(Index = 1:70)
predict(model, test)
forecast <- predict(model, test)
Cases$forecasts <- forecast
View(Cases)
(Cases$Date + 1):(Cases$Date +20)
(Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +20)
nrow(Cases)
65-47
test <- data.frame(Index = 1:(nrow(Cases) + 30))
forecast <- predict(model, test)
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast)
nrow(forecast)
length(forecast)
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[30:length(forecast)])
nrow(Cases)
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[30:nrow(Cases)])
forecast[30]
forecast[nrow(Cases): length(forecast)]
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[nrow(Cases): length(forecast)])
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[(nrow(Cases)+1): length(forecast)])
DF2
runApp()
Cases <- Cases %>% filter(!is.na(Deaths))
Cases <- Cases %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/328.2)
test <- data.frame(Index = 1:(nrow(Cases) + 30))
forecast <- predict(model, test)
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +30), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[(nrow(Cases)+1): length(forecast)])
DF2
runApp()
Cases <- Cases %>% filter(!is.na(Deaths))
Cases <- Cases %>% mutate(Index= 1:n(), DailyDeathsPerCapita=DeathsPerDay/328.2)
test <- data.frame(Index = 1:(nrow(Cases) + 60))
forecast <- predict(model, test)
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +60), origin = "1970-01-01"), "DailyDeathsPerCapita"= forecast[(nrow(Cases)+1): length(forecast)])
DF2
rbind(Cases, DF2)
Cases
DF2 <- data.frame("Date" = as.Date((Cases$Date[nrow(Cases)] + 1):(Cases$Date[nrow(Cases)] +60), origin = "1970-01-01"), "CasesActual"=NA, "DailyCasesActual"=NA, "Deaths"= NA, "DeathsPerDay"=NA,
"CalculatedNewCases"= NA, "TotalImpliedCases" =NA, "CalculatedDeaths" =NA, Index = "NA", "DailyDeathsPerCapita"= forecast[(nrow(Cases)+1): length(forecast)])
Cases <- rbind(Cases, DF2)
View(Cases)
Cases <- Cases %>% mutate(DeathsPerDay2 = DailyDeathsPerCapita * 328.2)
View(Cases)
Cases <- Cases %>% mutate(DeathsPerDay = DailyDeathsPerCapita * 328.2)
View(Cases)
ggplot(Cases) + geom_line(aes(Date, Deaths), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
Cases <- Cases %>% mutate(DeathsPerDay = ifelse(DeathsPerDay<0, 0, DeathsPerDay))
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
e^4
ln(e)
log(e)
log(5)
sqrt(5)
log10(5)
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
log(5)
log2(5)
runApp()
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
runApp()
forecast
ggplot(Cases) + geom_line(aes(Date, DeathsPerDay), color= "indianred3", size=1.5)  +
ggtitle(paste0("Deaths Per Day for ", input$State)) + theme_igray() + theme(plot.title = element_text(hjust = 0.5))
input$fatal
forecast*1.1
ggplot() + geom_line(data= Cases %>% filter(Date < Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5)
ggplot() + geom_line(data= Cases %>% filter(Date < Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5) + geom_line(data= Cases %>% filter(Date > Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5, linetype=2)
ggplot() + geom_line(data= Cases %>% filter(Date <= Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5) + geom_line(data= Cases %>% filter(Date > Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5, linetype=2)
ggplot() + geom_line(data= Cases %>% filter(Date < Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5) + geom_line(data= Cases %>% filter(Date >= Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5, linetype=2)
ggplot() + geom_line(data= Cases %>% filter(Date < Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5) + geom_line(data= Cases %>% filter(Date >= Sys.Date()), aes(Date, DeathsPerDay), color="indianred3", size=1.5, linetype=3)
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
install.packages('RcppArmadillo')
deployApp()
library(RcppArmadillo)
install.packages('RcppArmadillo')
library(RcppArmadillo)
deployApp()
shiny::runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
test
plot(Cases$DeathsPerDay)
plot(Cases$DeathsPerDay[20:])
plot(Cases$DeathsPerDay[20:nrow(Cases)])
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita, rep(NA, 30)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
plot(model)
plot(Cases$DailyDeathsPerCapita)
runApp()
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita, rep(NA, 30)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
forecast <- predict(model, test)
plot(forecast)
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita, rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
forecast <- predict(model, test)
plot(forecast)
forecast
Cases$DailyDeathsPerCapita
runApp()
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[20:nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
forecast <- predict(model, test)
forecast
runApp()
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-20):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
forecast <- predict(model, test)
forecast
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-10):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
forecast <- predict(model, test)
forecast
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-7):nrow(Cases)], rep(NA, 80)))
test <- data.frame(Index = 1:(nrow(Cases) + 100))
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-7):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 6) , data=Cdf)
forecast <- predict(model, test)
forecast
model <- lm(DPC ~ poly(Index, 3) , data=Cdf)
forecast <- predict(model, test)
forecast
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-14):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 4) , data=Cdf)
forecast <- predict(model, test)
forecast
model <- lm(DPC ~ poly(Index, 2) , data=Cdf)
model
forecast <- predict(model, test)
forecast
model <- lm(DPC ~ poly(Index, 2.5) , data=Cdf)
forecast <- predict(model, test)
forecast
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-7):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 2.5) , data=Cdf)
forecast <- predict(model, test)
forecast
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-7):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 3) , data=Cdf)
forecast <- predict(model, test)
forecast
model <- lm(DPC ~ poly(Index, 5) , data=Cdf)
forecast <- predict(model, test)
plot(forecast)
Cdf <- data.frame(DPC = c(Cases$DailyDeathsPerCapita[(nrow(Cases)-14):nrow(Cases)], rep(NA, 80)))
Cdf$Index <- 1:nrow(Cdf)
model <- lm(DPC ~ poly(Index, 5) , data=Cdf)
Cdf
test
model <- lm(DPC ~ poly(Index, 6) , data=Cdf)
forecast <- predict(model, test)
plot(forecast)
runApp()
runApp()
